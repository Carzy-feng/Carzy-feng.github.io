<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>恶意代码分析-day2</title>
    <link href="/2022/04/21/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-day2/"/>
    <url>/2022/04/21/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-day2/</url>
    
    <content type="html"><![CDATA[<p>学习《恶意代码分析实战》一书时，跟随书本所做的练习。</p><h2 id="Lab-3-1"><a href="#Lab-3-1" class="headerlink" title="Lab 3-1"></a>Lab 3-1</h2><p>使用动态分析基础技术来分析在Lab03-01.exe文件中的恶意代码</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>1、找出这个恶意到吗的导入函数与字符串列表</p><p>2、这个恶意代码在主机上的感染迹象特征是什么</p><p>3、这个恶意代码是否存在一些有用的网络特征码？如果存在，它们是什么</p><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><h4 id="1、导入函数与字符串"><a href="#1、导入函数与字符串" class="headerlink" title="1、导入函数与字符串"></a>1、导入函数与字符串</h4><p>导入函数：<code>kernel32.dll</code>中的<code>ExitProcess</code>：结束调用的进程及其他所有的线程</p><p>字符串列表：存在一个网址，以及<code>Software\ Microsoft\Active Setup\Installed Components\</code>注册表，该注册表在恶意软件中常用于开机自启(ActiveX方式启动)：该方式自启动会在该注册表下注册一条子建，任何在子建中新建<code>StubPath</code>的值项，内容为启动的文件名，</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204201443103.png" alt="image-20220420144325586"></p><p>查看启动时导入的DLL列表，使用了<code>ws2_32.dll</code>由此可以确定该木马具备联网功能</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204201527397.png" alt="image-20220420152746617"></p><h4 id="2、恶意代码的感染特征"><a href="#2、恶意代码的感染特征" class="headerlink" title="2、恶意代码的感染特征"></a>2、恶意代码的感染特征</h4><p>使用process Monitor 设置过滤规则</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204201609213.png" alt="image-20220420160913663"></p><p>然后就会看到该exe写入了一个文件，且大小为7168</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204201610514.png" alt="image-20220420161019536"></p><p>设置自启动</p><p><code>HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\</code> 中设置<code>VideoDriver</code>的值为<code>C:\WINDOWS\system32\vmx32to64.exe</code>，</p><p>每次开机都会运行该文件</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204201619117.png" alt="image-20220420161954713"></p><p>Lab03-01.exe和vmx32to64.exe两个文件的hash值一样，说明中病毒后该病毒会将自身复制一份到<code>C:\WINDOWS\system32\vmx32to64.exe</code></p><h4 id="3、网络特征"><a href="#3、网络特征" class="headerlink" title="3、网络特征"></a>3、网络特征</h4><p>由搜索字符串和导入函数可得知，该病毒会访问<code>www.practicalmalwareanalysis.com</code></p><h2 id="Lab-3-2"><a href="#Lab-3-2" class="headerlink" title="Lab 3-2"></a>Lab 3-2</h2><p>使用动态分析基础技术来分析在Lab03-02.dll文件中发现的恶意代码</p><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><p>1、你怎样才能让这个恶意代码自行安装</p><p>2、在安装之后，你如何让这个恶意代码运行起来？</p><p>3、你怎么能找到这个恶意代码是在哪个进程下运行的？</p><p>4、你可以在procmon工具中设置什么样的过滤器，才能收集这个恶意代码信息?</p><p>5、这个恶意代码在主机上的感染迹象特征是什么？</p><p>6、这个恶意代码是否存在一些有用的网络特征码？</p><h3 id="答案-1"><a href="#答案-1" class="headerlink" title="答案"></a>答案</h3><h4 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h4><p>存在<code>install、Uninstall、ServiceMain、UninstallService、installA</code></p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204201812472.png" alt="image-20220420181226100"></p><p>查看输入表</p><p>KERNEL32.dll</p><blockquote><p> CreateProcess</p></blockquote><p>ADVAPI32.dll</p><blockquote><p>RegSetValueEx</p></blockquote><p>WININER.dll</p><blockquote><p>HttpSendRequest</p></blockquote><p>WS2_32.DLL</p><p>截图：</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204201834703.png" alt="image-20220420183454043"></p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204201835725.png" alt="image-20220420183539621"></p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204201836012.png" alt="image-20220420183555445"></p><h5 id="字符串搜索"><a href="#字符串搜索" class="headerlink" title="字符串搜索"></a>字符串搜索</h5><p>得到一个网址，以及<code>serve.html</code></p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204201844432.png" alt="image-20220420184429944"></p><h4 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h4><p>安装恶意代码(安装前先使用Regshot拍摄注册表快照)</p><blockquote><p>rundll32.exe Lab03-02.dll,installA  &#x2F;&#x2F;直接在dll目录下运行即可</p></blockquote><p>安装完成后拍摄快照2，然后进行对比</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204201900309.png" alt="image-20220420190053164"></p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204201903429.png" alt="image-20220420190315142"></p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204201903524.png" alt="image-20220420190334603"></p><p>由于上方的是16进制值，我看不懂，所以我就去查注册表</p><blockquote><p>imagePath:  svchost.exe -k netsvcs  &#x2F;&#x2F;启动了netsvcs服务，这说明这是一款典型的利用Svchost进程加载运行的木马</p><p>且DisplayName和DependOnService都被设定为特定的值</p></blockquote><p><code>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\IPRIP</code>和另一个注册表下的内容都是一样的</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204201905028.png" alt="image-20220420190546724"></p><p>[HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\TermService] 下记录着“系统服务”的相关设置。那么ControlSet001、ControlSet002、ControlSet有什么区别呢？</p><blockquote><p> ControlSet001：系统真实的配置信息。</p><p> CurrentControlSet：运行时配置。 windows启动时会从ControlSet001复制一份副 本，作为操作系统当前的配置信息。我们对于计算机配置所作的修改都是直接写入到 CurrentControlSet，在重启过程中，windows会用CurrentControlSet的内容覆盖掉ControlSet001，以 保证这两个控件组一致。</p><p> ControlSet002：“最近一次成功启动的配置信息”。 当操作系统每成功启动一次（指成功登录），它都将CurrentControlSet和ControlSet001中的数据复制到ControlSet002中。</p></blockquote><h4 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h4><p>根据注册表得知安装dll后，会安装IPRIP服务，所以我们直接启动该服务即可启动该恶意代码</p><blockquote><p>net start IPRIP</p></blockquote><h4 id="3、"><a href="#3、" class="headerlink" title="3、"></a>3、</h4><p>由于之前我们知道了是用<code>svchost.exe</code>启动的该服务，我们可以指向查看该服务的DLL即可看到<code>lab03-02.dll</code>被引用</p><p>或者我们可以直接在Process Exploisrer中搜<code>Lab03-02.dll</code>，也可以得知是<code>svchost.exe</code>引用了该DLL</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204201934829.png" alt="image-20220420193443403"></p><h4 id="5、"><a href="#5、" class="headerlink" title="5、"></a>5、</h4><p>根据其会在注册表上设置<code>DisplayName</code>为特定的值，所以在感染的主机上查看svchost.exe的服务名称是否有<code>Intranet Network Awareness</code></p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204201952500.png" alt="image-20220420195239388"></p><h4 id="6、网络特征"><a href="#6、网络特征" class="headerlink" title="6、网络特征"></a>6、网络特征</h4><p>192.168.163.135</p><blockquote><p>nc -l -p 80  &#x2F;&#x2F;监听80端口</p></blockquote><p>修改host文件</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204202005185.png" alt="image-20220420200510749"></p><p>然后就会在192.168.163.135主机上监听到一条请求<code>serve.html</code>的信息</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204202003252.png"></p><p>所以查看感染主机是否有访问<code>practicalmalwareanalysis.com/serve.html</code>即可</p><h2 id="Lab-3-3"><a href="#Lab-3-3" class="headerlink" title="Lab 3-3"></a>Lab 3-3</h2><p>在一个安全的环境中执行Lab03-03.exe文件中发现的恶意代码，同时使用基础的动态分析工具监视它的行为</p><h3 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h3><p>1、当你使用Process Explorer工具进行监视时，你注意到了什么？</p><p>2、你可以找出任何的内存修改行为码？</p><p>3、这个恶意代码在主机上的感染迹象特征是什么？</p><p>4、这个恶意代码的目的是什么？</p><h3 id="答案-2"><a href="#答案-2" class="headerlink" title="答案"></a>答案</h3><h4 id="1、-1"><a href="#1、-1" class="headerlink" title="1、"></a>1、</h4><p>打开Process Explorer以及Process Monitor，然后运行Lab03-03.exe</p><p><strong>Process Expolorer</strong></p><p>可以看到创建了一个PID为<code>1748</code>的<code>svchost.exe</code>进程，然后退出</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204211035276.png" alt="image-20220421103520467"></p><p>我们可以看到<code>Lab03-03.exe</code>退出后，PID<code>1748</code>的进程还在以“孤儿”进程方式运行，我们可以看到下图的粉红色的<code>svchost.exe</code>与PID<code>1748</code>的<code>svchost.exe</code>有很明显的区别，正常的<code>svchost.exe</code>通常是作为<code>services.exe</code>的子进程，所以PID为<code>1748</code>的<code>svhost.exe</code>进程很可疑。</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204211037466.png" alt="image-20220421103713275"></p><h4 id="2、-1"><a href="#2、-1" class="headerlink" title="2、"></a>2、</h4><p>我们对比正常的<code>svchost.exe</code>进程与PID<code>1748</code>的<code>svchost.exe</code>进程之间的磁盘镜像和内存镜像中字符串列表来寻找不同点</p><p><strong>磁盘镜像字符串</strong></p><p>磁盘进行字符串相同</p><p>左边为正常进程，右边为异常进程</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204211055025.png" alt="image-20220421105504805"></p><p><strong>内存镜像字符串</strong></p><p>可以看到有非常明显的不同</p><p>左边为正常进程，右边为异常进程</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204211056330.png" alt="image-20220421105643812"></p><h4 id="3、-1"><a href="#3、-1" class="headerlink" title="3、"></a>3、</h4><p>由于我们在运行<code>Lab03-03.exe</code>之前就开启了<code>Process Monitor</code>，我们直接过滤PID<code>1748</code>的进程，看它在运行时干了什么</p><p>过滤规则</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204211100905.png" alt="image-20220421110049675"></p><p>创建了<code>practicalmalwareanalysis.log</code>并往里面写入内容</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204211101536.png" alt="image-20220421110129320"></p><p>所以这个木马的感染迹象特征是会在木马运行目录创建一个<code>practicalmalwareanalysis.log</code>文件，感染主机会单独运行一个<code>svchost.exe</code>进程，在进程的内存镜像中存在一个<code>practicalmalwareanalysis.log</code>的字符串</p><h4 id="4、"><a href="#4、" class="headerlink" title="4、"></a>4、</h4><p>我们在<code>Process Monitor</code>看到该进程创建了一个log文件，并往里面写入了内容，我们去查看该文件</p><p>log文件内容</p><p>1748是我们刚刚设置过滤规则时使用键盘输入的PID号，所以这程序可能是一个击键记录器</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204211105537.png" alt="image-20220421110515073"></p><p>为了验证我们的猜想，我们创建一个文件，并往里面输入内容</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204211108236.png" alt="image-20220421110802281"></p><p>再次查看log文件，可以看到这是一个击键记录器，将我们通过键盘输入的内容记录到log文件中</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204211109321.png" alt="image-20220421110902819"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>恶意代码分析-day1</title>
    <link href="/2022/04/19/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-day1/"/>
    <url>/2022/04/19/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-day1/</url>
    
    <content type="html"><![CDATA[<p>学习《恶意代码分析实战》一书时，跟随书本所做的练习。</p><h1 id="恶意代码分析"><a href="#恶意代码分析" class="headerlink" title="恶意代码分析"></a>恶意代码分析</h1><p><a href="https://codeload.github.com/Hadreysl/-/zip/refs/heads/master">下载连接</a></p><h2 id="Lab-1-1"><a href="#Lab-1-1" class="headerlink" title="Lab 1-1"></a>Lab 1-1</h2><p>分析Lab01-01.exe和Lab01-01.dll</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>1、将代码上传至http[:]&#x2F;&#x2F;www[.]VirusTotal[.]com&#x2F;进行分析并查看报告。文件匹配到了已有的反病毒软件特征吗</p><p>2、这些文件是什么时候编译的</p><p>3、这两个文件中是否存在迹象说明它们是否被加壳或混淆了？如果是，这些迹象在哪里</p><p>4、是否有导入函数显示出了这个恶意代码是做说明的？如果是，是哪些导入函数？</p><p>5、是否有导入函数显示或基于主机的迹象，让你可以在受感染系统上查找？</p><p>6、是否有基于网络的迹象，可以用来发现受感染机器上的这个恶意代码？</p><p>7、你猜这些文件的目的是什么</p><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><p>1、</p><p>lab01-01.exe</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204191343955.png" alt="image-20220419134310648"></p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204191345676.png" alt="image-20220419134536322"></p><p>lab01-01.dll</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204191347625.png" alt="image-20220419134726304"></p><p>2、编译时间：2010-12-20 0：16：19</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204191349022.png" alt="image-20220419134951503"></p><p>3、加壳情况：否。每个节的虚拟大小和实际大小都差不多</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204191351037.png" alt="image-20220419135148037"></p><p>4、释放一个文件</p><p><strong>EXE</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204191357974.png" alt="image-20220419135744882"></p><p>通过<code>createFile</code>创建一个新文件，并用<code>FindNextFile/FindFirstFile</code>查找该文件,还使用了<code>CopyfileA</code>复制文件，使用该病毒会查找和释放文件、以及复制文件</p><p>然后用<code>CreateFileMapping</code>加载该文件，使用<code>MapViewOfFile</code>将来读取和修改该文件，该函数可以修改PE文件，</p><p><strong>DLL</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204191414606.png" alt="image-20220419141409485"></p><p>存在<code>Sleep</code>延时执行，以及<code>CreateProcess</code>创建并启动一个新进程，即会执行文件，结合前面的exe分析可得知，该木马会释放一个pe文件，并执行，</p><p>该DLL导如了<code>WS2_32.dll</code>即存在联网行为</p><p>5、exe中存在路径<code>c:\\windows\\system32\\kerne132.dll</code></p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204191431960.png" alt="image-20220419143100626"></p><p>跟进去发现是创建一个文件，至此，可以得知，该木马会<code>c:\\windows\\system32\\kerne132.dll</code>，只需要查找该文件即可定位</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204191430505.png" alt="image-20220419143036570"></p><p>6、DLL中存在127[.]26[.]152[.]13这个IP，只要在受感染的机器上查看是否有访问这个IP即可找到该恶意代码</p><p>7、</p><h2 id="Lab-1-2"><a href="#Lab-1-2" class="headerlink" title="Lab 1-2"></a>Lab 1-2</h2><p>分析Lab01-02.exe</p><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><p>1、将代码上传至http[:]&#x2F;&#x2F;www[.]VirusTotal[.com]&#x2F;进行分析并查看报告。文件匹配到了已有的反病毒软件特征吗？</p><p>2、是否由这个文件被加壳或混淆的任何迹象？如果是这样，这些迹象是什么？如果该文件被加壳，请进行脱壳，如果可能的话。</p><p>3、有没有任何导入函数能够暗示出这个程序的功能？如果是，是哪些导入函数，他们会告诉你什么？</p><p>4、哪些基于主机或基于网络的迹象可以被用来确定这个恶意代码所感染的机器？</p><h3 id="答案-1"><a href="#答案-1" class="headerlink" title="答案"></a>答案</h3><p>1、</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204191437155.png" alt="image-20220419143732139"></p><p>2、存在加壳、UPX壳，虚拟大小和实际大小不符合</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204191438115.png" alt="image-20220419143834632"></p><p>使用UPX脱壳 <code>upx.exe -d lab01-02.exe</code></p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204191517292.png" alt="image-20220419151721265"></p><p>3、导入了<code>Kernel32.dll、ADVAAPI32.DLL、WINNET.DLL</code></p><p><code>WINNET.DLL</code>中使用了<code>InternetOpenUrl</code>这说明使用了FTP、HTTP或HTTPS访问了特定url</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204191555933.png" alt="image-20220419155508706"></p><p><code>Kernel32.dll</code>中使用了<code>GetModuleFileName</code>在运行进程时进行修改和复制文件，以及使用<code>CreateMutexA</code>和<code>OpenMutex</code>来创建一个互斥对象，以及打开互斥对象，使该主机只存在一个该对象。以及使用<code>CreateWaitableTimer</code>和<code>SetWaitableTimer</code>创建定时任务，</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204191555981.png" alt="image-20220419155523809"></p><p><code>ADVAPI32.dll</code>中使用了<code>CreateServiceA</code>来创建一个在启动时刻运行的服务，常用于持久化、隐藏或启动内核驱动</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204191555911.png" alt="image-20220419155537446"></p><p>4、查找字符串时可以得知，该exe会访问<code>http[:]//www[.]malwareanalysisbook[.]com</code></p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204191600971.png" alt="image-20220419160053840"></p><p>跟进该字符串</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204191601665.png" alt="image-20220419160126963"></p><p>继续跟进该变量</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204191602079.png" alt="image-20220419160159556"></p><p>使用了<code>InternetOpen</code>初始化访问的URL，可以确认感染的机器会访问该URL，这是我们清除了访问的网络特征，但调用的<code>CreateServiceA</code>进行持久化特征还未发现，接下来回到声明字符串处继续查找</p><p>跟进<code>Malservice</code>,确定该字符串为创建服务名称</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204191612478.png" alt="image-20220419161242300"></p><p>与他们一起声明的还有<code>HGL345</code>，确定了该字符串为运行时实例的名称</p><p><img src="https://cdn.jsdelivr.net/gh/Carzy-feng/images@main/data/202204191616700.png" alt="image-20220419161639520"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/04/19/hello-world/"/>
    <url>/2022/04/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
